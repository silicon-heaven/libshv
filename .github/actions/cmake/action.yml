name: Setup CMake
description: "Invoke CMake and generate build files"
inputs:
  qt_version:
    description: "Specify Qt version to use"
    required: true
  qt_arch:
    description: "Specify Qt version to use"
    default: "gcc_64"
  qt_target:
    description: "Specify Qt version to use"
    required: true
  use_qt6:
    description: "Specify whether we're using Qt 5 or Qt 6"
    required: true
  modules:
    description: "Specify which modules should be installed"
    required: true
  ccache:
    description: "Specify ccache cache should be saved"
    default: "true"
  additional_cmake_args:
    description: "Additional args to pass to CMake"
    default: ""
  asan:
    description: "Specify if ASAN/UBSAN should be enabled"
    default: "false"

runs:
  using: "composite"
  steps:
    # Linux deps
    - name: Install/cache clazy, ninja, openldap, doctest, and Qt's dependencies
      if: runner.os != 'Windows'
      uses: awalsh128/cache-apt-pkgs-action@v1.4.3
      with:
        packages: ninja-build doctest-dev libgl1-mesa-dev libpulse-dev libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0 libxcb-util1 libxcb-xinerama0 libxkbcommon-x11-0 libldap-dev clazy
        version: 1.0

    - name: Install trompeloeil
      if: runner.os != 'Windows'
      run: curl -o trompeloeil.deb http://de.archive.ubuntu.com/ubuntu/pool/universe/t/trompeloeil-cpp/libtrompeloeil-cpp-dev_47-1build1_amd64.deb && sudo dpkg -i trompeloeil.deb
      shell: bash

    # Windows deps
    - name: Install Windows deps
      if: runner.os == 'Windows'
      env:
        # Needed to build doctest
        # https://github.com/doctest/doctest/issues/893
        CMAKE_POLICY_VERSION_MINIMUM: 3.0
      run: |
        # https://github.com/microsoft/vcpkg/issues/41199#issuecomment-2378255699
        export SystemDrive="$SYSTEMDRIVE"
        export SystemRoot="$SYSTEMROOT"
        export windir="$WINDIR"
        CMAKE_EXTRA_ARGS="'-DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake'" >> "$GITHUB_ENV"
        if [[ ${{ inputs.qt_arch }} = win64_mingw ]]; then
          vcpkg install doctest:x64-mingw-dynamic trompeloeil:x64-mingw-dynamic
          CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} '-DMINGW=ON' '-G MinGW Makefiles'"
        else
          vcpkg install doctest trompeloeil
        fi

        echo cmake_extra_args="${CMAKE_EXTRA_ARGS}" >> "$GITHUB_ENV"
      shell: bash

    # Qt
    - name: Install Qt
      uses: Kidev/install-qt-action@v4.4.2 # Needed for WASM
      with:
        cache: true
        aqtversion: ">=3.2.0"
        host: ${{ inputs.qt_target == 'wasm' && 'all_os' || null }}
        version: ${{ inputs.qt_version }}
        arch: ${{ inputs.qt_arch }}
        install-deps: false
        modules: ${{ inputs.modules }}
        target: ${{ inputs.qt_target }}
        extra: --autodesktop

    - name: ccache
      if: inputs.ccache == 'true'
      uses: hendrikmuhs/ccache-action@v1.2.12
      with:
        key: ${{ github.workflow }}-${{ github.job }}
        max-size: 50M
        
    - name: Android-specific stuff
      if: inputs.qt_arch == 'android_arm64_v8a'
      run: |
        chmod +x "${QT_ROOT_DIR}/bin/qt-cmake"
        echo cmake_extra_args="${cmake_extra_args} '-DQT_HOST_PATH=$(realpath "${QT_ROOT_DIR}/../gcc_64")'" >> "$GITHUB_ENV"
        echo CMAKE_BIN="${QT_ROOT_DIR}/bin/qt-cmake" >> "$GITHUB_ENV"
      shell: bash

    - name: Add Werror
      if: runner.os != 'Windows'
      run: |
        echo CFLAGS="-Werror ${CFLAGS}" >> "$GITHUB_ENV"
        echo CXXFLAGS="-Werror ${CXXFLAGS}" >> "$GITHUB_ENV"
      shell: bash

    - name: Setup MSVC toolchain
      if: inputs.qt_arch == 'win64_msvc2022_64'
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Use Ninja with MSVC
      if: inputs.qt_arch == 'win64_msvc2022_64'
      run: |
        # Need to use Ninja with MSVC, otherwise ccache doesn't work. And I don't want to use MSBuild anyway. Hopefully
        # that won't be an issue.
        echo cmake_extra_args="${cmake_extra_args} '-G Ninja'" >> "$GITHUB_ENV"
      shell: bash

    - name: WASM-specific stuff
      if: inputs.qt_arch == 'wasm_singlethread'
      run: |
        QT_DIR="$(dirname "${QT_ROOT_DIR}")"
        CMAKE_BIN="${QT_DIR}/wasm_singlethread/bin/qt-cmake"
        chmod +x "${CMAKE_BIN}"
        echo CMAKE_BIN="${CMAKE_BIN}" >> "$GITHUB_ENV"
        echo cmake_extra_args="'-DBUILD_SHARED_LIBS=OFF' '-DQT_HOST_PATH=$(realpath "${QT_DIR}/gcc_64")'" >> "$GITHUB_ENV"
      shell: bash

    - name: Enable ASAN/UBSAN
      if: inputs.asan == 'true'
      run: |
        echo CFLAGS="-fsanitize=address,undefined ${CFLAGS}" >> "$GITHUB_ENV"
        echo CXXFLAGS="-fsanitize=address,undefined ${CXXFLAGS}" >> "$GITHUB_ENV"
      shell: bash

    - name: Configure CMake
      run: |
        CFLAGS="${CFLAGS}" \
        CXXFLAGS="${CXXFLAGS}" \
        "${CMAKE_BIN:-cmake}" \
        -S '${{github.workspace}}' \
        -B '${{github.workspace}}/build' \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_C_COMPILER_LAUNCHER=ccache \
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
        -DLIBSHV_USE_QT6=${{ inputs.use_qt6 }} \
        -DLIBSHV_WITH_ALL=ON \
        ${{ env.cmake_extra_args }} \
        ${{ inputs.additional_cmake_args }}
      shell: bash
