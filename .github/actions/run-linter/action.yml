name: run-linter
description: "Run a linter on all changed files"
inputs:
  lint_program_with_args:
    description: "Which program to run"
    required: true

runs:
  using: "composite"
  steps:
    - uses: ./.github/actions/cmake
      with:
        qt_version: 6.5.3
        use_qt6: ON
        modules: qtserialport qtwebsockets
        additional_cmake_args: -DCMAKE_GLOBAL_AUTOGEN_TARGET=ON -DCMAKE_AUTOGEN_ORIGIN_DEPENDS=OFF

    - uses: mjp41/workaround8649@c8550b715ccdc17f89c8d5c28d7a48eeff9c94a8
      if: runner.os == 'Linux'
      with:
        os: ubuntu-latest

    - name: Build autogenerated stuff
      shell: bash
      run: cmake --build ${{github.workspace}}/build --parallel "$(nproc)" --target autogen

    - name: Copy compile_commands.json
      shell: bash
      run: cp build/compile_commands.json compile_commands.json

    - name: Run the linter
      shell: bash
      run: |
        BASE_REF="${{github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before}}"
        git fetch --depth=1 origin "$BASE_REF"
        # FIXME: The clang on CI chokes on lambda captures of structured binding variables. Remove the blacklisting of
        # the files after the CI gets updated. (AFAIK clang-16).
        readarray -t CHANGED_FILES < <(git diff --diff-filter=d --name-only "$BASE_REF" | grep 'cpp$' | grep -v -e "libshviotqt/tests/serialportsocket/test_serialportsocket.cpp" -e "libshvchainpack/tests/test_rpcvalue.cpp")
        if [[ "${#CHANGED_FILES[@]}" -eq 0 ]]; then
          echo "No changed cpp files."
          exit 0
        fi
        echo "Changed files:"
        printf '%s\n' "${CHANGED_FILES[@]}"
        printf '%s\n' "${CHANGED_FILES[@]}" | parallel --verbose --jobs "$(nproc)" --plus _=[{#}/{##}] ${{ inputs.lint_program_with_args }} {}
