# vim: sw=2
name: Test

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      emsdk_cache_dir: "emsdk-cache"
      emscripten_version: 3.1.56
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Qt 5.15.2 / Ubuntu 24.04
            os: ubuntu-24.04
            qt_version: 5.15.2
            qt_arch: gcc_64
            use_qt6: OFF
            modules: NONE
            asan: true
            env: |
              CC=gcc-14
              CXX=g++-14

          - name: Qt 6.10.0 / Ubuntu 24.04
            os: ubuntu-24.04
            qt_arch: linux_gcc_64
            asan: true
            env: |
              CC=gcc-14
              CXX=g++-14

          - name: Qt 6.10.0 / Android
            os: &ubuntu ubuntu-24.04
            qt_target: android
            qt_arch: android_arm64_v8a
            additional_cmake_args: -DLIBSHV_WITH_LDAP=OFF

          - name: Qt 6.10.0 / WebAssembly
            os: *ubuntu
            qt_target: wasm
            qt_arch: wasm_singlethread
            modules: qtwebsockets

          - name: Qt 6.10.0 / Windows MinGW
            os: &windows windows-2025
            qt_arch: win64_mingw
            additional_cmake_args: &windows_args >-
              -DLIBSHV_WITH_LDAP=OFF
              -DCMAKE_RUNTIME_OUTPUT_DIRECTORY='${{github.workspace}}/build/bin'
              -DCMAKE_LIBRARY_OUTPUT_DIRECTORY='${{github.workspace}}/build/bin'

          - name: Qt 6.10.0 / Windows MSVC
            os: *windows
            qt_arch: win64_msvc2022_64
            additional_cmake_args: *windows_args

    steps:
      - &checkout_step
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Java for Android
        if: matrix.qt_target == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup emsdk cache
        if: matrix.qt_target == 'wasm'
        uses: actions/cache@v4
        with:
          key: emsdk-cache-${{ env.emscripten_version }}
          path: ${{ env.emsdk_cache_dir }}

      - name: Setup emsdk
        if: matrix.qt_target == 'wasm'
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{ env.emscripten_version }}
          actions-cache-folder: ${{ env.emsdk_cache_dir }}

      - name: Set Qt modules
        shell: bash
        run: |
          case '${{ matrix.modules }}' in
              NONE)
                  CI_QT_MODULES=''
                  ;;
              '')
                  CI_QT_MODULES='qtserialport qtwebsockets qtnetworkauth'
                  ;;
              *)
                  CI_QT_MODULES='${{ matrix.modules }}'
                  ;;
          esac

          echo "CI_QT_MODULES=$CI_QT_MODULES" >> "$GITHUB_ENV"

      - name: Set env from matrix
        shell: bash
        run: |
          if [[ '${{matrix.env}}' != '' ]]; then
              echo '${{matrix.env}}' >> "$GITHUB_ENV"
          fi

      - name: Setup CMake
        uses: ./.github/actions/cmake
        with:
          qt_version: ${{ matrix.qt_version || '6.10.0' }}
          qt_target: ${{ matrix.qt_target || 'desktop' }}
          qt_arch: ${{ matrix.qt_arch }}
          use_qt6: ${{ matrix.use_qt6 || 'ON' }}
          modules: ${{ env.CI_QT_MODULES }}
          asan: ${{ matrix.asan || 'false' }}
          additional_cmake_args: ${{ matrix.additional_cmake_args || '' }}

      - name: Build and test
        uses: ./.github/actions/build-and-test

  nix:
    name: Qt 6.6.2 / NixOS
    runs-on: *ubuntu
    steps:
      - *checkout_step
      - name: Install Nix
        uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Build
        run: nix --experimental-features 'nix-command flakes' build -L .
      - name: Build Full
        run: nix --experimental-features 'nix-command flakes' build -L .#full
      - name: Build CLI
        run: nix --experimental-features 'nix-command flakes' build -L .#cli
      - name: Build for clients
        run: nix --experimental-features 'nix-command flakes' build -L .#forClients
      - name: Flake check
        run: nix --experimental-features 'nix-command flakes' flake check .
      - name: Format
        run: nix --experimental-features 'nix-command flakes' fmt . && git diff --exit-code
