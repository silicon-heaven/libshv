cmake_minimum_required(VERSION 3.18.4)

set(USE_QT6 ON CACHE BOOL "Qt6 build")
set(BUILD_SHARED_LIBS ON CACHE BOOL "Build shared libraries instead of static")

set(WITH_CHAINPACK ON CACHE BOOL "Build libshvchainpack (C)")
set(WITH_CHAINPACK_CPP ON CACHE BOOL "Build libshvchainpack (C++)")
set(WITH_CORE ON CACHE BOOL "Build libshvcore")
set(WITH_COREQT ON CACHE BOOL "Build libshvcoreqt")
set(WITH_IOTQT ON CACHE BOOL "Build libshviotqt")
set(WITH_VISU ON CACHE BOOL "Build libshvvisu")
set(WITH_BROKER ON CACHE BOOL "Build libshvbroker")

set(WITH_CLI_EXAMPLES OFF CACHE BOOL "Enable build of CLI examples")
set(WITH_GUI_EXAMPLES OFF CACHE BOOL "Enable build of GUI examples")
set(WITH_LDAP OFF CACHE BOOL "Enable authentization via LDAP")
set(WITH_SANITIZERS OFF CACHE BOOL "Enable ASan/UBsan")
if(WITH_SANITIZERS)
	set(CMAKE_C_FLAGS "-fsanitize=address,undefined ${CMAKE_CXX_FLAGS}")
	set(CMAKE_CXX_FLAGS "-fsanitize=address,undefined ${CMAKE_CXX_FLAGS}")
	set(CMAKE_EXE_LINKER_FLAGS "-fsanitize=address,undefined ${CMAKE_CXX_FLAGS}")
endif()

project(libshv LANGUAGES C CXX)
include(CTest)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

set(CMAKE_SHARED_LIBRARY_PREFIX "") # we don't want CMake to prepend "lib" to our libraries, we prefer adding that ourselves
set(CMAKE_STATIC_LIBRARY_PREFIX "")

if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
	set(SHV_WARNING_FLAGS "-Wall -Wextra -pedantic -Wcast-align -Wunused -Wpedantic -Wmisleading-indentation -Wdouble-promotion -Wformat=2 -Wimplicit-fallthrough")

	# We switched to qsizetype in Qt6, so let's get rid of this warning in Qt5 for now.
	# TODO: Remove this after dropping support for Qt5
	if(USE_QT6)
		set(SHV_WARNING_FLAGS "${SHV_WARNING_FLAGS} -Wconversion")
		if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
			set(SHV_WARNING_FLAGS_CXX "-Wuseless-cast ${SHV_WARNING_FLAGS_CXX}")
		endif()
	endif()

	set(SHV_WARNING_FLAGS "${SHV_WARNING_FLAGS} -Wno-sign-conversion")
	set(SHV_WARNING_FLAGS_CXX "-Wnon-virtual-dtor -Wold-style-cast -Woverloaded-virtual")

	if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
		set(SHV_WARNING_FLAGS "-Wduplicated-cond -Wduplicated-branches -Wlogical-op -Wshadow=local ${SHV_WARNING_FLAGS}")
	else() # Clang
		set(SHV_WARNING_FLAGS "-Wshadow ${SHV_WARNING_FLAGS}")
	endif()

	set(SHV_WARNING_FLAGS_CXX "${SHV_WARNING_FLAGS} ${SHV_WARNING_FLAGS_CXX}")

	set(CMAKE_C_FLAGS "${SHV_WARNING_FLAGS} ${CMAKE_C_FLAGS}")
	set(CMAKE_CXX_FLAGS "${SHV_WARNING_FLAGS_CXX} ${CMAKE_CXX_FLAGS}")
endif()

if(CMAKE_CXX_COMPILER_LAUNCHER STREQUAL "ccache" AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
	# These flags are needed for ccache with Clang because of precompiled headers.
	set(CMAKE_C_COMPILER_LAUNCHER env CCACHE_SLOPPINESS=pch_defines,time_macros ccache)
	set(CMAKE_CXX_COMPILER_LAUNCHER env CCACHE_SLOPPINESS=pch_defines,time_macros ccache)
	set(CMAKE_C_FLAGS "-Xclang -fno-pch-timestamp ${CMAKE_C_FLAGS}")
	set(CMAKE_CXX_FLAGS "-Xclang -fno-pch-timestamp ${CMAKE_CXX_FLAGS}")
endif()

if(BUILD_TESTING)
	find_package(doctest QUIET)
	if(NOT doctest_FOUND)
		message(STATUS "doctest library NOT found, disabling tests")
		set(BUILD_TESTING OFF)
	endif()

	find_package(trompeloeil QUIET)
	if(NOT trompeloeil_FOUND)
		message(STATUS "trompeloeil library NOT found, disabling tests")
		set(BUILD_TESTING OFF)
	endif()
endif()

if (NOT TARGET libnecrolog)
	add_subdirectory(3rdparty/necrolog)
endif()

function(check_shv_dep dependent dependent_var dependency dependency_var)
	if(${${dependent_var}})
		if (NOT ${${dependency_var}})
			message(FATAL_ERROR "${dependent} needs ${dependency}, but ${dependency} has been disabled explicitly via ${dependency_var}. Set ${dependency_var} to ON to build ${dependent}.")
		else()
			list(APPEND BUILT_COMPONENTS ${dependent})
			set(BUILT_COMPONENTS "${BUILT_COMPONENTS}" PARENT_SCOPE)
		endif()
	endif()
endfunction()

check_shv_dep(libshvchainpack-c WITH_CHAINPACK "" ON)
check_shv_dep(libshvchainpack-cpp WITH_CHAINPACK_CPP libshvchainpack-c WITH_CHAINPACK)
check_shv_dep(libshvcore WITH_CORE libshvchainpack-cpp WITH_CHAINPACK_CPP)
check_shv_dep(libshvcoreqt WITH_COREQT libshvcore WITH_CORE)
check_shv_dep(libshviotqt WITH_IOTQT libshvcoreqt WITH_COREQT)
check_shv_dep(libshvvisu WITH_VISU libshviotqt WITH_IOTQT)
check_shv_dep(libshvbroker WITH_BROKER libshviotqt WITH_IOTQT)
check_shv_dep(cli-examples WITH_CLI_EXAMPLES libshvbroker WITH_BROKER)

if(WITH_CHAINPACK)
	add_subdirectory(libshvchainpack/c)
endif()
if(WITH_CHAINPACK_CPP)
	add_subdirectory(libshvchainpack)
endif()
if(WITH_CORE)
	add_subdirectory(libshvcore)
endif()

if(WITH_COREQT)
	if(USE_QT6)
		message(STATUS "Enabling Qt6 support")
		if(EMSCRIPTEN)
			find_package(Qt6 COMPONENTS Core Network OPTIONAL_COMPONENTS WebSockets Widgets)
		else()
			find_package(Qt6 COMPONENTS Core Network Sql SerialPort OPTIONAL_COMPONENTS WebSockets Widgets)
		endif()
		set(QtWebSockets_FOUND ${Qt6WebSockets_FOUND})
		set(Qt_FOUND ${Qt6_FOUND})
		set(QtWidgets_FOUND ${Qt6Widgets_FOUND})
	else()
		find_package(Qt5 COMPONENTS Core Network Sql SerialPort OPTIONAL_COMPONENTS WebSockets Widgets)
		set(QtWebSockets_FOUND ${Qt5WebSockets_FOUND})
		set(Qt_FOUND ${Qt5_FOUND})
		set(QtWidgets_FOUND ${Qt5Widgets_FOUND})

		function(qt_add_library)
			add_library(${ARGV})
		endfunction()

		function(qt_add_executable)
			add_executable(${ARGV})
		endfunction()
	endif()
endif()

# We'll error out if the user has explicitly enabled websocket support, but Qt WebSockets aren't available.
if(WITH_SHV_WEBSOCKETS AND NOT QtWebSockets_FOUND)
	message(FATAL_ERROR "SHV websocket support explicitly enabled, but Qt WebSockets weren't found!")
endif()

# Otherwise enable websocket support based on whether we found Qt6 WebSockets.
if (NOT DEFINED WITH_SHV_WEBSOCKETS)
	set(WITH_SHV_WEBSOCKETS ${QtWebSockets_FOUND})
endif()

if (WITH_SHV_WEBSOCKETS)
	message(STATUS "SHV websocket support enabled")
else()
	message(STATUS "SHV websocket support disabled")
endif()

if(WITH_CORE)
	if(Qt_FOUND)
		set(CMAKE_AUTOMOC ON)
		if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
			set(CMAKE_AUTOMOC_MOC_OPTIONS "-b${CMAKE_CURRENT_SOURCE_DIR}/cmake/qt_moc_disable_warnings.h")
		endif()

		if(WITH_COREQT)
			add_subdirectory(libshvcoreqt)
		endif()
		if(WITH_IOTQT)
			add_subdirectory(libshviotqt)
		endif()
		if(NOT EMSCRIPTEN)
			set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
			if(WITH_LDAP)
				find_package(PkgConfig REQUIRED)
				pkg_check_modules(OpenLDAP REQUIRED ldap>=2.5.0)
			endif()
			if(WITH_BROKER)
				add_subdirectory(libshvbroker)
			endif()
		endif()

		if(WITH_CLI_EXAMPLES)
			message(STATUS "CLI examples will be built")
			add_subdirectory(examples/cli/minimalshvclient)
			add_subdirectory(examples/cli/shvdevice)
			add_subdirectory(examples/cli/minimalshvbroker)
			add_subdirectory(examples/cli/shvcall)
		endif()
		if(QtWidgets_FOUND)
			set(CMAKE_AUTORCC ON)
			set(CMAKE_AUTOUIC ON)
			if(WITH_VISU)
				add_subdirectory(libshvvisu)
			endif()
			if(WITH_GUI_EXAMPLES)
				message(STATUS "GUI example samplegraph application will be built")
				add_subdirectory(examples/gui/samplegraph)
			endif()
		else()
			message(STATUS "Qt Widgets not found, libshvvisu won't be built")
		endif()
	else()
		message(STATUS "Qt not found, Qt-based libs won't be built")
	endif()
endif()

option(BUILD_SHV_UTILS "Whether to build ccp2cp, cp2cp, and cpmerge" ON)
check_shv_dep(shv-utils BUILD_SHV_UTILS libshvcoreqt WITH_CORE)

# Utils
if(BUILD_SHV_UTILS)
	message(STATUS "SHV utils will be built")
	# ccp2cp
	add_executable(ccp2cp utils/ccp2cp/main.c)
	target_link_libraries(ccp2cp libshvchainpack-c)

	# cp2cp
	add_executable(cp2cp utils/cp2cp/main.cpp)
	target_link_libraries(cp2cp libshvchainpack-cpp)

	# cp2log
	add_executable(cp2log utils/cp2log/main.cpp)
	target_link_libraries(cp2log libshvcore)

	# cpmerge
	add_executable(cpmerge utils/cpmerge/main.cpp)
	target_link_libraries(cpmerge libshvchainpack-cpp)

	install(TARGETS ccp2cp cp2cp cpmerge)
else()
	message(STATUS "SHV utils WON'T be built")
endif()

if(NOT DEFINED BUILT_COMPONENTS)
	message(FATAL_ERROR "All components have been disabled, nothing to build.")
endif()

list(JOIN BUILT_COMPONENTS ", " BUILT_COMPONENTS_STR)

message(STATUS "Enabled SHV components: ${BUILT_COMPONENTS_STR}")
